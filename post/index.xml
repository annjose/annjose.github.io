<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Reflections</title>
    <link>http://ann.chiramattel.com/post/</link>
    <description>Recent content in Posts on Reflections</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 02 Apr 2017 02:02:31 -0700</lastBuildDate>
    <atom:link href="http://ann.chiramattel.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TDD in Xcode Playground</title>
      <link>http://ann.chiramattel.com/post/xcode-playgrounds-tdd/</link>
      <pubDate>Sun, 02 Apr 2017 02:02:31 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/xcode-playgrounds-tdd/</guid>
      <description>&lt;p&gt;I use Xcode playground a lot in order to write code snippets - either to try out something that I read in a blog, or to demonstrate a code improvement that I want to suggest in a code review, or sometimes even to prototype a design before doing the full-blown implementation in Xcode project. During this experimentation phase, the correctness of the code was verified by analyzing the ouput displayed on the right-hand side column of the playground. This was really cumbersome and error-prone and I was hoping that there would be a better solution for this.&lt;/p&gt;

&lt;p&gt;No wonder why I was really excited when I learned about a simple trick that enables us to write unit tests in Xcode playground itself. Yes! We can do TDD in Xcode Playgrounds! Let&amp;rsquo;s see how to do it.&lt;/p&gt;

&lt;p&gt;Essentially, the trick is as follows - you create a regular test class that derives from XCTestCase and run it using Xcode&amp;rsquo;s default test suite &lt;code&gt;defaultTestSuite()&lt;/code&gt;. This is the test suite that contains the test cases for all the tests in the class (&lt;a href=&#34;https://developer.apple.com/reference/xctest/xctestcase/1496289-defaulttestsuite&#34;&gt;https://developer.apple.com/reference/xctest/xctestcase/1496289-defaulttestsuite&lt;/a&gt;). So all you need to do is write a test class and invoke &lt;code&gt;defaultTestSuite().run()&lt;/code&gt; on the test class.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
import XCTest

var str = &amp;quot;Hello, playground&amp;quot;

struct TodoItem {
    let title: String
    let toBeCompletedBy: Date?
    
    init(title: String) {
        self.title = title
        self.toBeCompletedBy = nil
    }
}

class TodoTests: XCTestCase {
    
    func testTodo() {
        let todo = TodoItem(title: &amp;quot;finish laundry&amp;quot;)
        XCTAssertNotNil(todo)
        XCTAssertEqual(todo.title, &amp;quot;finish laundry&amp;quot;)
    }
    
}

TodoTests.defaultTestSuite().run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will execute all the tests in the test class and display the results in the familiar Xcode test format as folllows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Test Suite &#39;TodoTests&#39; started at 2017-04-02 01:36:16.888
Test Case &#39;-[__lldb_expr_49.TodoTests testTodo]&#39; started.
Test Case &#39;-[__lldb_expr_49.TodoTests testTodo]&#39; passed (0.004 seconds).
Test Suite &#39;TodoTests&#39; passed at 2017-04-02 01:36:16.894.
	 Executed 1 test, with 0 failures (0 unexpected) in 0.004 (0.006) seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can write your code snippets and tests side-by-side and verify the results using the tests. The ultimate beauty of this approach is that these tests are run automatically whenever you make changes in the class-under-test, thanks to Xcode playground&amp;rsquo;s auto-refresh capability.&lt;/p&gt;

&lt;p&gt;So where did I learn this from? Initially, I read about this concept from the &lt;a href=&#34;http://initwithstyle.net/2015/11/tdd-in-swift-playground&#34;&gt;blog initWithStyle&lt;/a&gt; where the author implemented a slightly complex solution that creates &lt;code&gt;PlaygroundTestObserver&lt;/code&gt;, &lt;code&gt;TestRunner&lt;/code&gt; and connected it to the Playground&amp;rsquo;s &lt;code&gt;XCTestObservationCenter&lt;/code&gt;. But recently I read another &lt;a href=&#34;https://m.pardel.net/tdd-in-xcode-playgrounds-544a95db11e2&#34;&gt;blog post&lt;/a&gt; which proposed a much simple solution as described above.&lt;/p&gt;

&lt;p&gt;If you would like to try it out for yourself, here is a simple gist that demonstrates the code - &lt;a href=&#34;https://gist.github.com/annjose/1baa75b0796d0d2fef1a10ab74d5bd65&#34;&gt;annjose/XcodePlaygroundUnitTests.swift&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Realm Mobile Platform</title>
      <link>http://ann.chiramattel.com/post/realm-announces-mobile-platform/</link>
      <pubDate>Tue, 27 Sep 2016 08:22:02 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/realm-announces-mobile-platform/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt; is a company that I respect a lot because of their support for mobile developers and the open nature nature of their offerings. Their easy-to-use, blazingly fast &lt;a href=&#34;https://realm.io/products/realm-mobile-database/&#34;&gt;Mobile database&lt;/a&gt; software supports all mobile platforms - iOS, Android, React Native and Xamarin, in Java, ObjC, Swift and C#.
That is why I am happy to see that today they announced &lt;a href=&#34;https://realm.io/news/introducing-realm-mobile-platform/&#34;&gt;Realm Mobile Platform&lt;/a&gt; that combines Realm client side database with server-side technology (Object Server as they call it). This platform provides the base infrastructure for mobile apps to support offline sync, that enables end users to interact with the app even when there is no network connection.&lt;/p&gt;

&lt;p&gt;According to the article, this a highly performant solution because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object Server does not use any ORM, just plain objects&lt;/li&gt;
&lt;li&gt;data objects on the device are always kept in sync with server&lt;/li&gt;
&lt;li&gt;during sync, only the changes in the objects are transmitted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my understanding, the direct equivalent of the Realm Mobile Platform is the &lt;a href=&#34;https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-offline-data-sync/&#34;&gt;Offline Sync capability of Azure Mobile Apps&lt;/a&gt;. Both platforms follow the same model and have very comparable features. That is is a good thing, because as developers, we have multiple options to choose from.&lt;/p&gt;

&lt;p&gt;The client-server offline sync is an interesting area that we have been exploring for an app that we are working on. It turns out that Realm Mobile Platform and Azure Mobile Apps are two good choices. If you know of more options, please let me know in the comments below.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ann.chiramattel.com/img/RealmAzure.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>How to Display Mathematical Expressions in Blog</title>
      <link>http://ann.chiramattel.com/post/display-math-expressions-in-hugo/</link>
      <pubDate>Sat, 24 Sep 2016 07:49:00 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/display-math-expressions-in-hugo/</guid>
      <description>&lt;p&gt;As part of my Machine Learning course, I wanted to share some of my learnings / notes in this blog so that someone will find it useful and I could also refer to it later. But I was not sure how to display the mathemtical expressions used in calculating cost function, gradient descent etc. in my blog. I have used the &lt;a href=&#34;https://support.office.com/en-us/article/Insert-a-mathematical-equation-in-OneNote-2016-for-Mac-08969f84-ed02-4baf-8a77-7ab3c1e26afe&#34;&gt;OneNote Equation tool&lt;/a&gt; before, but didn&amp;rsquo;t know how to do it on the Web for my blog. So I explored the options and here is what I found.&lt;/p&gt;

&lt;p&gt;First of all, I had to find a good JavaScript library that can display mathematical expressions described in a LaTeX-style syntax in the HTML (or Markdown) source of a web page. It turns out that the best such library is &lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt;. It produces high quality typesetting that scales to full resolution which renders beautifully on the web page. More importantly, it uses web-based fonts, so the person who views the HTML page does not have to install any plugins to view those equations. MathJax is very easy to use, you just include a script tag in the HTML to load the JavaScript from a CDN, configure your preferences and start writing mathematical expressions in your content. Here are the detailed steps on &lt;a href=&#34;http://docs.mathjax.org/en/latest/start.html&#34;&gt;how to get started with MathJax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then my question was how do I use it with my blog engine &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. With a quick Googling, I found this good article &lt;a href=&#34;https://gohugo.io/tutorials/mathjax/&#34;&gt;MathJax Support&lt;/a&gt; on Hugo site itself. Lovely! (and it looks like writing mathematical expressions is a very popular requirement). The instructions are easy to follow and I could set it up in a few minutes. One thing I realized is that in order to show inline style mathematics, MathJax uses the syntax of a single backslash followed by parentheses. But in Hugo, I have to use double backslash followed by parentheses. If you are using any other blog engine like Tumblr, TypePad, Weebly etc., &lt;a href=&#34;http://checkmyworking.com/2012/01/how-to-get-beautifully-typeset-maths-on-your-blog&#34;&gt;check out this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So now, my blog is ready to display mathemtical expressions. Here is a sample expression of quadratic equation that shows both inline and display expressions:&lt;/p&gt;

&lt;p&gt;When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are as follows:
$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning - A New Journey</title>
      <link>http://ann.chiramattel.com/post/machine-learning-coursera/</link>
      <pubDate>Tue, 09 Aug 2016 20:05:54 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/machine-learning-coursera/</guid>
      <description>&lt;p&gt;Few weeks ago, I started the &lt;a href=&#34;https://www.coursera.org/learn/machine-learning&#34;&gt;Machine Learning course on Coursera&lt;/a&gt; by Andrew Ng of Stanford University. The course is great, learning a lot of new concepts. Sometimes it is hard, but it is really fun learning this new topic and brushing up the old Math lessons of Linear Algebra, matrix manipulation and derivatives.&lt;/p&gt;

&lt;p&gt;The course starts with the basics, including a primer on Linear Algebra (it is optional, but I took it anyway since it has been more than a decade when I learned it in college). At the end of each module, there is a quiz and programming assignments, which are interesting.&lt;/p&gt;

&lt;p&gt;In addition to the content, I love the way this course is making me think hard and concentrate for long periods of time to understand the concepts and basics. This experience is very different from learning a new programming language or framework where there is a set pattern of how you learn.&lt;/p&gt;

&lt;p&gt;In fact, I had started the course early this year, but couldn&amp;rsquo;t keep up with the schedule due to work load. But this time, I am forcing myself to stick with it because I want to learn the subject as soon as I can. I am convinced that Machine Learning is the future of technology and I have to master it sooner than later. After all, as Douglas Rushkoff reminds us, I want to &lt;a href=&#34;https://www.amazon.com/Program-Be-Programmed-Commands-Digital/dp/159376426X&#34;&gt;Program, not Be Programmed&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReactNative in Visual Studio Code</title>
      <link>http://ann.chiramattel.com/post/react-native-visual-studio-code/</link>
      <pubDate>Wed, 13 Apr 2016 21:22:02 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/react-native-visual-studio-code/</guid>
      <description>&lt;p&gt;I have been thoroughly enjoying working on &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;ReactNative&lt;/a&gt; projects, but was disappointed by the lack of a good debugging environment. I had tried multiple solutions like &lt;a href=&#34;http://nuclide.io/&#34;&gt;Nuclide&lt;/a&gt; (which I found it to be very slow), WebStorm with JSX plugins (which is mainly syntax recognition). So I had to always launch the app from Xcode/Android Studio, then attach Chrome Dev tools and keep switching between all three for debugging. This was frustrating, but there is hope&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.reactnative.com/react-native-tools-extension-for-visual-studio-code/&#34;&gt;ReactJS conference in February&lt;/a&gt; announced the release of &lt;a href=&#34;https://github.com/Microsoft/vscode-react-native&#34;&gt;ReactNative extension&lt;/a&gt; for &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VisualStudio Code&lt;/a&gt;, the lightweight editor by Microsoft. The name &amp;lsquo;Visual Studio&amp;rsquo; may sound heavy, but &lt;strong&gt;VS Code&lt;/strong&gt; is a completely new editor built from ground-up based on Electron. It is super fast, flexible, configurable and Open Source too! The ReactNative extension for VS Code supports intellisense, ability to run react-native commands and most importantly, full-fledged debugging experience - yeah yeah breakpoints, call stack and stuff :-)&lt;/p&gt;

&lt;p&gt;I tried to code this &lt;a href=&#34;https://www.raywenderlich.com/126063/react-native-tutorial&#34;&gt;ReactNative tutorial by Ray Wenderlich&lt;/a&gt; in VS Code using this extension and it was absolutely brilliant. The UI is very clean, clutter-free with subtle yet vivid colors. As soon as I opened the starter project, it recognized that it is a ReactNative project and got it ready to go. Then I simply put a breakpoint and hit the Debug Run button and Viola! - my app started and the breakpoint was hit. I can step through code, inspect callstack, local variables, debug console etc. all in one place!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ann.chiramattel.com/img/ReactNativeInVSCode.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ReactNative extension in VS Code&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Conversation As Interface</title>
      <link>http://ann.chiramattel.com/post/conversation-as-interface/</link>
      <pubDate>Fri, 08 Apr 2016 20:47:54 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/conversation-as-interface/</guid>
      <description>&lt;p&gt;The User Interface is going beyond UI and voice recognition to the new trend of using conversation as a new way to engage with customers, i.e. &lt;strong&gt;Conversation As Interface&lt;/strong&gt;. It is a more natural form of communication, especially for question-answer / interview experiences.&lt;/p&gt;

&lt;p&gt;Now there is an emerging trend of companies opening their chat bot API to third party developers. Facebook &lt;a href=&#34;http://techcrunch.com/2016/01/05/facebook-messenger-bots/&#34;&gt;has been doing experiments&lt;/a&gt; in their Messenger app allowing a few developers like Uber, Assist etc. to create chat bots. They are &lt;a href=&#34;http://techcrunch.com/2016/04/07/facebook-chatbots/&#34;&gt;expected to announce&lt;/a&gt; opening up the SDK to all in next week’s F8 conference. Microsoft &lt;a href=&#34;http://techcrunch.com/2016/03/30/microsoft-is-bringing-bots-to-skype-and-everywhere-else/&#34;&gt;released a Bot Framework&lt;/a&gt; in Build last week and this supports multiple channels – Slack, SMS, Skype etc. Similarly, &lt;a href=&#34;http://techcrunch.com/2016/03/24/line-builds-out-its-chat-app-for-businesses-as-facebook-messenger-threat-looms-large/&#34;&gt;Line&lt;/a&gt; announced its SDK.&lt;/p&gt;

&lt;p&gt;Chat bots could be a new way to reach customers even when the app is not installed. And if they support deep linking, then developers can deliver a smooth transition into sepcific flows in the app. This is a great opportunity to be where our users are. It will be interesting to see how this idea pans out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ann.chiramattel.com/img/bot-framework.png&#34; alt=&#34;Bot Framework&#34; title=&#34;Bots&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Post from Hugo</title>
      <link>http://ann.chiramattel.com/post/first-post-from-hugo/</link>
      <pubDate>Mon, 27 Apr 2015 00:49:45 -0700</pubDate>
      
      <guid>http://ann.chiramattel.com/post/first-post-from-hugo/</guid>
      <description>&lt;p&gt;This is my first blog post created by &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a simple, fast and powerful blogging engine written in Go. Setting up my blog on Hugo was quick and easy; it took less than 4 hours.&lt;/p&gt;

&lt;p&gt;I have set this up such that I publish the content to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt;, so the publish workflow is as simple as writing some Markdown and a git push. &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;This is a good tutorial&lt;/a&gt; on how to do this.&lt;/p&gt;

&lt;p&gt;Here is what I love about Hugo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static content generation, which means blazing fast rendering, no need to manage databases, VMs etc.&lt;/li&gt;
&lt;li&gt;Very easy to publish content - create content in markdown and simple git push&lt;/li&gt;
&lt;li&gt;No dependency issues; literally runs out of the box&lt;/li&gt;
&lt;li&gt;Highly customizable UI&lt;/li&gt;
&lt;li&gt;A good opportunity to learn &lt;a href=&#34;https://golang.org/&#34;&gt;Go language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, I am just loving Hugo. Next step is to explore it further and customize it to my heart&amp;rsquo;s content.
    &lt;img src=&#34;http://ann.chiramattel.com/img/hugo.png&#34; alt=&#34;Hugo&#34; title=&#34;Hugo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>